Object
    https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object
Cadena de prototipos
    https://developer.mozilla.org/es/docs/Web/JavaScript/Inheritance_and_the_prototype_chain
Function(apply,bind,call)
   
   
Class
    https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Classes
2015
    https://github.com/tc39/ecma262
    https://github.com/tc39/proposals/blob/HEAD/finished-proposals.md

Azucar sintactico
    Functiones flecha
    
    https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Functions/Arrow_functions

    function sum(a,b){return a+b}
    const sum = (a,b)=>a+b

    desectructuring

    a=[1,2,3]

    b=a[0]
    c=a[1]

    const [b,c] = a

    https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

    rest-parameters

    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters

    default pÃ rameters
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters
    const sum = (a,b=4)=>a+b

    sum(5)

    spread operator

    a=[1,2,3]
    b=[2,3,4]

    c=[...a,...b]
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax

    Operador de cortocircuito

    https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Expressions_and_Operators

    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining

    Conditional ternary
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator

    Verdadero False

    Verdadero

    !0
    !''
    True
    Object o array not null y not undefined

    False
    =0
    ''
    False
    null
    undefined

    Comparacion de valores y tipos
    === !==

    Conceptos avanzados de funcional

    Clousure
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures

        function sum(a){
            return b=>a+b
        }

    Callback

    https://developer.mozilla.org/es/docs/Glossary/Callback_function

ambito(this)
    Se pierde el this si pasas una funcion como argumento a otra(callback)
    Se pierde si asignas una funciona a una variable

    var x=10
    var foo={
        x:11,
        write:function(){console.log(this.x)}
    }

    window.x=10
    window.foo={}
    window.write = foo.write

    foo.write() //11
    write = foo.write.bind(foo)
    write()     //10

    https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/this

Generators e iterators

https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Generator
https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Iterators_and_generators


Asincrono

https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/
https://www.youtube.com/watch?v=8aGhZQkoFbQ

    Callback
    Promises
    Async Await

https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Modules